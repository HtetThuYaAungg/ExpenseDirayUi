import { createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import { API_URL } from "../../api/api";

const initialState = {
  expenses: [],
  isLoading: false,
  error: null,
};

export const expensesSlice = createSlice({
  name: "expenses",
  initialState,
  reducers: {
    setLoading: (state, action) => {
      state.isLoading = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
    },
    setExpenses: (state, action) => {
      state.expenses = action.payload;
    },
  },
});

export const { setLoading, setError, setExpenses } = expensesSlice.actions;

export const fetchExpenses = () => async (dispatch) => {
  dispatch(setLoading(true));
  try {
    const response = await axios.get(`${API_URL}/getexpenses`);
    dispatch(setExpenses(response.data));
    dispatch(setLoading(false));
  } catch (error) {
    dispatch(setError(error.message));
    dispatch(setLoading(false));
  }
};

export const selectExpenses = (state) => state.expenses.expenses;
export const selectExpensesStatus = (state) => state.expenses.isLoading;

export default expensesSlice.reducer;

// import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
// import axios from "axios";
// import { API_URL } from "../../api/api";

// const initialState = {
//   expenses: [],
//   status: "idle",
//   error: null,
// };

// export const fetchExpenses = createAsyncThunk(
//   "expenses/fetchExpenses",
//   async () => {
//     const response = await axios.get(`${API_URL}/getexpenses`);
//     return response.data;
//   }
// );

// export const expensesSlice = createSlice({
//   name: "expenses",
//   initialState,
//   reducers: {},
//   extraReducers: (builder) => {
//     builder
//       .addCase(fetchExpenses.pending, (state) => {
//         state.status = "loading";
//       })
//       .addCase(fetchExpenses.fulfilled, (state, action) => {
//         state.status = "succeeded";
//         state.expenses = action.payload;
//       })
//       .addCase(fetchExpenses.rejected, (state, action) => {
//         state.status = "failed";
//         state.error = action.error.message;
//       });
//   },
// });

// export const selectExpenses = (state) => state.expenses.expenses;
// export const selectExpensesStatus = (state) => state.expenses.status;
// export const selectExpensesError = (state) => state.expenses.error;

// export default expensesSlice.reducer;
